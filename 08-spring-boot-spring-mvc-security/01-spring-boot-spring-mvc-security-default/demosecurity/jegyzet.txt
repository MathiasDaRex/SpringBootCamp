

- Make a custom login form
Custom login form development process

1. Modify Spring Security Configuration to reference custom login form

2. Develom a controller to show it

3. Create custom login form

    - HTML, CSS, Bootstrap

for the login page we must make a controller,
but for the loginProcesingURL it's not required, we get it for free
loginProcesingURL will be handled by the Spring Security Filters

We send form data to the processing url we configured, must be POST

Spring Security defines default names for login form fields

  for user names:  username
  for passwords:   password

Context path, context root
the root path for the web application.
Context Root: my-ecommerce-app
http://localhost:8080/my-ecommerce-app

@ <- gives us access to context  path dynamically
we can add that to links, like form submissions
if we change the context path the links will still work
much better then hard coding the context path

Recommended to use it, best practice!

Spring security magic:
    we have ?error param if we have a login error
    we have ?logout param lo log out

    -   Send data with submit button to default logout URL /logout
        logout URL will be handled by Spring Security Filters
        no coding required, Spring Security will provide it for free
        we must POST our data across to that endpoint with a submit button

        when logout is processed, by default Spring Security will
         - invalidate users HTTP session and removes session cookies, ect
         - send back to login page
         - append logout parameter: ?logout

Restrict access based on user Roles
    1 - Create supporting controller code and view pages
        homepage - EMPLOYEE, MANAGER, ADMIN
        /leaders - MANAGER, ADMIN
        /systems - ADMIN

    2 - restrict access based on Roles
        updates spring security java config file
        general syntax
            requestMatchers(<< add a path to match >>).hasRole(<< authorized role >>)
            or multiple roles, we can add comma-delimited list ("ADMIN","DEV","VIP"...)
            requestMatchers(<< add a path to match >>).hasAnyRole(<< list of authorized roles >>)

            to match all sub-directories of systems we use: ("/systems/**")
            requestMatchers(/systems/**).hasRole("ADMIN")

Custom access denied page
    1 - Configure custom page for access denied
        we make an exception if the user cannot access the given page,
        and show our own error page for that

        .exceptionHandling(configurer ->
                configurer
                    .accessDeniedPage("/access-denied")
                    );

    2 - Create supporting controller code and view page
        we put our controller to the loginController, cuz it's more security related.
        but we can put it anywhere

Display content based on roles
    if we don't even want to show some things on our page, we can add rules to show them
    only for the authorized users.

    sec:authorize="hasRole('MANAGER')" to show something only for the MANAGER roled users
    this only generated in the final HTML, when the user is authorized


Database Access
    Spring Security can read user account info from the database
    By default we have to follow Spring Security's predefined table schemas
    we have this out of the box, and with JDBC support, we have very little code to write

    data schema:
        users
            username
            password
            enabled
        authorities
            username
            authority <- internally spring security uses "ROLE_" prefix

    we can also customize the table schemas, useful if we have custom tables
    that's specific to our project
    with this we are responsible for developing the code to access the data
        - JDBC, JPA/Hibernate

    1 - Develop SQL Script to set up database tables

    2 - Add database support to Maven POM file

    3 - Create JDBC properties file

    4 - Update Spring Security Configuration to use JDBC for authentication and authorization

password storage
    storing our passwords as plain text is not good for real projects.
    the best practice is to store them in an encrypted format.

    Spring Security recommends using bcrypt algorithm
    bcrypt:
        performs one-way encrypted hashing
        adds a random salt to the password for additional protection
        includes support to defeat brute force attacks

        why use bcrypt: https://danboterhoven.medium.com/why-you-should-use-bcrypt-to-hash-passwords-af330100b861
        detailed analysis: https://en.wikipedia.org/wiki/Bcrypt
        pwd hashing best practices:  https://crackstation.net/hashing-security.htm

        how to use bcrypt:
            1 - use a website utility to perform the encryption - https://www.bcryptcalculator.com/
                multiple runs will generate a different password due to random password salting

            2 - write java code to perform the encryption

    development process:
        1 - run SQL script that contains encryptet passwords
            modify DDL for the password field, length should be 68
            {bcrypt} - 8chars, encodedPwd - 60chars
            the password from db is NEVER decrypted. it's a one way algorithm

Custom tables for Spring Security
    if we have our own tables, and want to use them, not the default Spring Security schema

    for this we need to:
        - tell spring how to query your custom tables
        - provide query to find user by user name
        - provide query to find authorities/roles by user name

    Development process
        1 - Create our custom tables with SQL
        2 - update Spring Security Configuration
            - provide query to find user by user name
            - provide query to find authorities/roles by user name

How to use JPA/Hibernate with Spring Security:
    an exercise for that:
    https://www.luv2code.com/downloads/udemy-spring-boot-3/bonus-spring-boot-spring-mvc-security-jpa-hibernate-bcrypt/bonus-lecture-spring-boot-spring-mvc-security-security-jpa-hibernate-bcrypt.pdf
    source code:
    https://www.luv2code.com/bonus-lecture-spring-mvc-security-jpa-hibernate-bcrypt-code

How to make user registration form:
    https://www.luv2code.com/downloads/udemy-spring-boot-3/bonus-lecture-spring-boot-spring-mvc-security-user-registration/bonus-lecture-spring-boot-spring-mvc-security-user-registration.pdf
    https://www.luv2code.com/bonus-lecture-spring-boot-spring-mvc-security-user-registration-code

How to create a landing page that's accessable to everyone:
    https://www.luv2code.com/downloads/udemy-spring-boot-3/bonus-lecture-spring-boot-spring-mvc-security-landing-page/bonus-lecture-spring-boot-spring-mvc-security-landing-page.pdf
    https://www.luv2code.com/downloads/udemy-spring-boot-3/bonus-lecture-spring-boot-spring-mvc-security-landing-page/bonus-code-spring-boot-spring-mvc-security-landing-page.zip